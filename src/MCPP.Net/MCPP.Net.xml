<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCPP.Net</name>
    </assembly>
    <members>
        <member name="T:MCPP.Net.Controllers.ImportController">
            <summary>
            Swagger导入API控制器
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Import(MCPP.Net.Models.SwaggerImportRequest)">
            <summary>
            导入Swagger API并动态注册为MCP工具
            </summary>
            <param name="request">导入请求参数(包含SwaggerUrl和可选的SourceBaseUrl)</param>
            <returns>导入结果</returns>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.GetImportedTools">
            <summary>
            获取当前已导入的所有API工具
            </summary>
            <returns>已导入的API工具列表</returns>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.DeleteImportedTool(System.String,System.String)">
            <summary>
            删除已导入的API工具
            </summary>
            <param name="nameSpace">工具命名空间</param>
            <param name="className">类名</param>
            <returns>操作结果</returns>
        </member>
        <member name="T:MCPP.Net.Core.CecilAssemblyBuilder">
            <summary>
            使用 Mono.Cecil 动态生成程序集
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.CecilAssemblyBuilder.CreateDynamicMethod(Mono.Cecil.ModuleDefinition,Mono.Cecil.TypeDefinition,System.String,System.String,System.String,System.String,System.String,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            创建动态方法
            </summary>
            <param name="moduleDefinition">模块定义</param>
            <param name="typeDefinition">类型定义</param>
            <param name="operationId">操作ID</param>
            <param name="path">API路径</param>
            <param name="httpMethod">HTTP方法</param>
            <param name="summary">摘要</param>
            <param name="description">描述</param>
            <param name="operation">操作定义</param>
            <param name="baseUrl">API基础URL</param>
        </member>
        <member name="M:MCPP.Net.Core.CecilAssemblyBuilder.GenerateSchemaDescription(Newtonsoft.Json.Linq.JObject,System.Text.StringBuilder,System.Int32)">
            <summary>
            生成Schema的描述信息
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.CecilAssemblyBuilder.NormalizeMethodName(System.String)">
            <summary>
            规范化方法名
            </summary>
            <param name="operationId">操作ID</param>
            <returns>规范化的方法名</returns>
        </member>
        <member name="M:MCPP.Net.Core.CecilAssemblyBuilder.NormalizeParameterName(System.String)">
            <summary>
            规范化参数名
            </summary>
            <param name="paramName">参数名</param>
            <returns>规范化的参数名</returns>
        </member>
        <member name="M:MCPP.Net.Core.CecilAssemblyBuilder.FindParameterIndex(Mono.Collections.Generic.Collection{Mono.Cecil.ParameterDefinition},System.String)">
            <summary>
            查找参数在集合中的索引
            </summary>
            <param name="parameters">参数集合</param>
            <param name="name">参数名</param>
            <returns>参数索引，找不到返回-1</returns>
        </member>
        <member name="T:MCPP.Net.Core.IAssemblyBuilder">
            <summary>
            程序集生成器标准接口
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.IAssemblyBuilder.Build(Newtonsoft.Json.Linq.JObject,MCPP.Net.Models.SwaggerImportRequest,System.String)">
            <summary>
            根据Swagger文档和请求信息动态生成程序集
            </summary>
            <returns>程序集文件路径</returns>
        </member>
        <member name="T:MCPP.Net.Core.IToolAssemblyLoader">
            <summary>
            管控程序集的加载和卸载，避免因外部引用导致无法卸载程序集
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.IToolAssemblyLoader.Load(System.String)">
            <summary>
            加载程序集
            </summary>
            <remarks>
            返回值不要包含 <see cref="T:System.Reflection.Assembly"/>, <see cref="T:System.Type"/>, <see cref="T:System.Runtime.Loader.AssemblyLoadContext"/> 等反射相关类型以及动态程序集中的类型实例，否则在卸载程序集时，可能因外部依赖导致无法卸载程序集
            </remarks>
        </member>
        <member name="M:MCPP.Net.Core.IToolAssemblyLoader.Unload(System.String)">
            <summary>
            卸载程序集
            </summary>
        </member>
        <member name="T:MCPP.Net.Core.McpServerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder"/> extension methods
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpServerExtensions.UseToolsKeeper(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)">
            <summary>
            使用 <see cref="T:MCPP.Net.Core.McpToolsKeeper"/> 管理 Tools，方便后续的增删操作
            </summary>
        </member>
        <member name="T:MCPP.Net.Core.McpServerOptionsPostConfigure">
            <summary>
            覆盖 <see cref="T:ModelContextProtocol.Server.McpServerOptions"/> 默认配置，使用 <see cref="T:MCPP.Net.Core.McpToolsKeeper"/> 管理 Tools，方便后续的增删操作
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpServerOptionsPostConfigure.#ctor(MCPP.Net.Core.McpToolsKeeper)">
            <summary>
            覆盖 <see cref="T:ModelContextProtocol.Server.McpServerOptions"/> 默认配置，使用 <see cref="T:MCPP.Net.Core.McpToolsKeeper"/> 管理 Tools，方便后续的增删操作
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpServerOptionsPostConfigure.PostConfigure(System.String,ModelContextProtocol.Server.McpServerOptions)">
            <inheritdoc />
        </member>
        <member name="T:MCPP.Net.Core.McpToolsKeeper">
            <summary>
            Tool 管理员，可以在运行时添加和删除 Tools
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.#ctor(Microsoft.Extensions.Logging.ILogger{MCPP.Net.Core.McpToolsKeeper})">
            <summary>
            Tool 管理员，可以在运行时添加和删除 Tools
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.SetTools(ModelContextProtocol.Protocol.Types.ToolsCapability)">
            <summary>
            使用原始配置初始化<see cref="T:MCPP.Net.Core.McpToolsKeeper"/>
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.Add(System.String,System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerTool})">
            <summary>
            添加一个新的 Tool 集合
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.Remove(System.String)">
            <summary>
            移除一个 Tool 集合
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.ListToolsHandler(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken)">
            <summary>
            获取所有 Tool 集合
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.CallToolHandler(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <summary>
            调用指定的 Tool
            </summary>
        </member>
        <member name="T:MCPP.Net.Core.PluginAssembly">
            <summary>
            程序集元数据信息，方便统一管理释放
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.PluginAssembly.#ctor(System.Reflection.Assembly,System.Runtime.Loader.AssemblyLoadContext)">
            <summary>
            程序集元数据信息，方便统一管理释放
            </summary>
        </member>
        <member name="P:MCPP.Net.Core.PluginAssembly.SerializerOptions">
            <summary>
            绑定到程序集的 <see cref="T:System.Text.Json.JsonSerializerOptions"/>
            </summary>
            <remarks>
            Microsoft.Extensions.Ai 内部通过 ConditionalWeakTable 缓存了 Tool 对应的 MethodInfo 信息，如果不释放将无法卸载程序集。
            ConditionalWeakTable 的 Key 为 <see cref="T:System.Text.Json.JsonSerializerOptions"/> 对象，所以可以将整个程序集的所有 Tools 对应到一个 <see cref="T:System.Text.Json.JsonSerializerOptions"/> 上，在卸载程序集前删除对象引用即可<br/>
            https://github.com/dotnet/extensions/blob/f1f17e642a685df7e87b805be1efe4729ff725e4/src/Libraries/Microsoft.Extensions.AI/Functions/AIFunctionFactory.cs#L219-L247
            </remarks>
        </member>
        <member name="P:MCPP.Net.Core.PluginAssembly.Assembly">
            <summary>
            动态生成的程序集
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.PluginAssembly.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MCPP.Net.Core.ToolAssemblyLoader">
            <summary>
            <see cref="T:MCPP.Net.Core.IToolAssemblyLoader"/> 的默认实现
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.ToolAssemblyLoader.#ctor(MCPP.Net.Core.McpToolsKeeper,Microsoft.Extensions.Logging.ILogger{MCPP.Net.Core.ToolAssemblyLoader})">
            <summary>
            <see cref="T:MCPP.Net.Core.IToolAssemblyLoader"/> 的默认实现
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.ToolAssemblyLoader.Load(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MCPP.Net.Core.ToolAssemblyLoader.Unload(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:MCPP.Net.Core.ToolLoadedDetail">
            <summary>
            <see cref="M:MCPP.Net.Core.IToolAssemblyLoader.Load(System.String)"/> 的返回值，包含了加载的具体信息
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.ToolLoadedDetail.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{MCPP.Net.Models.ImportedTool})">
            <summary>
            <see cref="M:MCPP.Net.Core.IToolAssemblyLoader.Load(System.String)"/> 的返回值，包含了加载的具体信息
            </summary>
        </member>
        <member name="M:MCPP.Net.McpEndpointRouteBuilderExtensions.MapMcp(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.Func{Microsoft.AspNetCore.Http.HttpContext,ModelContextProtocol.Server.IMcpServer,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets up endpoints for handling MCP HTTP Streaming transport.
            </summary>
            <param name="endpoints">The web application to attach MCP HTTP endpoints.</param>
            <param name="runSession">Provides an optional asynchronous callback for handling new MCP sessions.</param>
            <returns>Returns a builder for configuring additional endpoint conventions like authorization policies.</returns>
        </member>
        <member name="T:MCPP.Net.Models.SwaggerImportRequest">
            <summary>
            Swagger导入请求
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.SwaggerUrl">
            <summary>
            Swagger文档URL或本地路径
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.SourceBaseUrl">
            <summary>
            源服务器基础URL(包含IP和端口)
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.NameSpace">
            <summary>
            生成类的命名空间
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.ClassName">
            <summary>
            生成的类名
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.SwaggerImportResult">
            <summary>
            Swagger导入结果
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.Success">
            <summary>
            导入是否成功
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.ApiCount">
            <summary>
            导入的API数量
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.ToolClassName">
            <summary>
            工具类名称
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.ImportedApis">
            <summary>
            导入的API名称列表
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.ImportedTool">
            <summary>
            已导入的API工具信息
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.NameSpace">
            <summary>
            工具命名空间
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.ClassName">
            <summary>
            工具类名
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.ApiCount">
            <summary>
            API数量
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.ImportDate">
            <summary>
            导入日期
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.SwaggerSource">
            <summary>
            Swagger来源
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.SourceBaseUrl">
            <summary>
            源服务器基础URL
            </summary>
        </member>
        <member name="T:MCPP.Net.Services.ImportedToolsService">
            <summary>
            已导入工具服务
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.ImportedToolsService.GetImportedTools">
            <summary>
            获取已导入的工具列表
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.ImportedToolsService.AddImportedTool(MCPP.Net.Models.ImportedTool)">
            <summary>
            添加导入的工具信息
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.ImportedToolsService.LoadCompiledTool(System.String,System.String)">
            <summary>
            根据命名空间和类名加载已编译的工具
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.ImportedToolsService.LoadSwaggerDllTools">
            <summary>
            从ImportedSwaggers目录加载DLL工具
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.ImportedToolsService.SaveImportedTools">
            <summary>
            保存工具信息到文件
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.ImportedToolsService.LoadImportedTools">
            <summary>
            从文件加载工具信息
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.ImportedToolsService.RemoveImportedTool(System.String,System.String)">
            <summary>
            从导入工具列表中删除工具
            </summary>
            <param name="nameSpace">命名空间</param>
            <param name="className">类名</param>
            <returns>是否成功删除</returns>
        </member>
        <member name="T:MCPP.Net.Services.SwaggerImportService">
            <summary>
            Swagger导入服务
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.SwaggerImportService.ImportSwaggerAsync(MCPP.Net.Models.SwaggerImportRequest)">
            <summary>
            导入Swagger文档并生成MCP工具
            </summary>
            <param name="request">导入请求</param>
            <returns>导入结果</returns>
        </member>
        <member name="M:MCPP.Net.Services.SwaggerImportService.GetSwaggerJsonAsync(System.String)">
            <summary>
            获取Swagger JSON内容
            </summary>
            <param name="swaggerUrlOrPath">Swagger URL或本地文件路径</param>
            <returns>Swagger JSON内容</returns>
        </member>
        <member name="M:MCPP.Net.Services.SwaggerImportService.GetImportedTools">
            <summary>
            获取所有已导入的工具
            </summary>
            <returns>已导入的工具列表</returns>
        </member>
        <member name="M:MCPP.Net.Services.SwaggerImportService.GetDynamicToolTypes">
            <summary>
            获取所有已加载的动态工具类型
            </summary>
            <returns>已加载的工具类型列表</returns>
        </member>
        <member name="M:MCPP.Net.Services.SwaggerImportService.DeleteImportedTool(System.String,System.String)">
            <summary>
            删除已导入的工具
            </summary>
            <param name="nameSpace">工具命名空间</param>
            <param name="className">类名</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:MCPP.Net.Services.SwaggerImportService.CleanupResources">
            <summary>
            清理资源
            </summary>
        </member>
        <member name="T:MCPP.Net.SwaggerImportExtensions">
            <summary>
            MCP Server Builder的Swagger导入扩展
            </summary>
        </member>
        <member name="M:MCPP.Net.SwaggerImportExtensions.WithSwaggerTools(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            添加动态生成的Swagger工具类型
            </summary>
            <param name="builder">MCP服务器构建器</param>
            <param name="dynamicToolTypes">动态生成的工具类型列表</param>
            <returns>MCP服务器构建器</returns>
        </member>
        <member name="T:MCPP.Net.UnsafeImports.UnsafeAIFunctionMcpServerTool">
            <summary>
            https://github.com/modelcontextprotocol/csharp-sdk/blob/4c537ef86bd8bb10980962a8f0bac001453c5cd9/src/ModelContextProtocol/Server/AIFunctionMcpServerTool.cs
            </summary>
        </member>
        <member name="M:MCPP.Net.UnsafeImports.UnsafeAIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <remarks>
            Microsoft.Extensions.AI 内部会使用 JsonSerializerOptions，
            </remarks>
        </member>
        <member name="M:MCPP.Net.UnsafeImports.UnsafeAIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerToolCreateOptions,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="options"></param>
            <param name="serializerOptions"></param>
            <returns></returns>
        </member>
        <member name="T:MCPP.Net.UnsafeImports.UnsafeAIJsonUtilities">
            <summary>
            https://github.com/dotnet/extensions/blob/f1f17e642a685df7e87b805be1efe4729ff725e4/src/Libraries/Microsoft.Extensions.AI.Abstractions/Utilities/AIJsonUtilities.Defaults.cs#L43-L73
            </summary>
        </member>
        <member name="M:MCPP.Net.UnsafeImports.UnsafeAIJsonUtilities.CreateDefaultOptions">
            <summary>
            调用私有方法 Microsoft.Extensions.AI.AIJsonUtilities.CreateDefaultOptions
            </summary>
            <returns></returns>
        </member>
        <member name="T:ModelContextProtocol.Server.IMcpServerMethodRegistry">
            <summary>
            MCP服务器方法注册接口
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.IMcpServerMethodRegistry.AddMethod(System.Reflection.MethodInfo)">
            <summary>
            添加方法到MCP服务器
            </summary>
            <param name="methodInfo">方法信息</param>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerMethodRegistry">
            <summary>
            MCP服务器方法注册实现
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerMethodRegistry.AddMethod(System.Reflection.MethodInfo)">
            <summary>
            添加方法到MCP服务器
            </summary>
            <param name="methodInfo">方法信息</param>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerMethodRegistry.GetRegisteredMethods">
            <summary>
            获取已注册的所有方法
            </summary>
            <returns>已注册的方法列表</returns>
        </member>
    </members>
</doc>
